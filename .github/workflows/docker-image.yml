name: Build and Push Docker Image

on:
  push:
    branches:
      - main  # Runs on push to main branch
  workflow_dispatch:  # Allows manual execution

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # Uses GitHub-hosted runner

    permissions:
      contents: read
      packages: write 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Pulls the repo
        with:
          repository: kratarget/team1
          ref: main
          token: ${{ secrets.PACKAGES_TOKEN }}

      - name: Set up JDK 17  # Change this version if needed
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build the project with Maven
        run: mvn clean package -DskipTests  # Add -DskipTests if you want to skip tests

      - name: Bump Maven version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "Updating Maven project to version: $VERSION"
          mvn versions:set -DnewVersion=$VERSION


      - name: Setup jfrog
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest
        env:
          JF_URL: "https://oneretailhackaton.jfrog.io"  #be mindful not to add the path /artifactory here as it will cause authentication issue
          JF_USER: ${{ secrets.ARTIFACT_USER_ID }}
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACT_TOKEN }} # You have an option of giving password as well

      - name: maven build
        run: |
              jf mvn-config --repo-deploy-releases=${ARTIFACTORY_RELEASE} --repo-deploy-snapshots=${ARTIFACTORY_SNAPSHOT}
              jf mvn deploy
              jf rt bp oneretail-app ${{ github.run_number }}

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.PACKAGES_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository }}/team1-app:latest .

      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{ github.repository }}/team1-app:latest
