name: Build and Push Docker Image

on:
  push:
    branches:
      - main  # Runs on push to main branch
  workflow_dispatch:  # Allows manual execution

env:
  ARTIFACTORY_RELEASE: team1-libs-release    # <-- Change to your release repo name
  ARTIFACTORY_SNAPSHOT: team1-libs-snapshot  # <-- Change to your snapshot repo name
  REGISTRY: oneretailhackaton.jfrog.io
  IMAGE_NAME: oneretailhackaton.jfrog.io/virtual-docker/oneretail-app:${{ github.run_number }}
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest  # Uses GitHub-hosted runner

    permissions:
      contents: read
      packages: write 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Pulls the repo
        with:
          repository: kratarget/team1
          ref: main
          token: ${{ secrets.PACKAGES_TOKEN }}

      - name: Set up JDK 17  # Change this version if needed
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build the project with Maven
        run: mvn clean package -DskipTests  # Add -DskipTests if you want to skip tests

      - name: Bump Maven version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "Updating Maven project to version: $VERSION"
          mvn versions:set -DnewVersion=$VERSION

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Configure Maven for JFrog
        run: |
          jf mvn-config \
            --repo-resolve-releases=${{ env.ARTIFACTORY_RELEASE }} \
            --repo-resolve-snapshots=${{ env.ARTIFACTORY_SNAPSHOT }} \
            --repo-deploy-releases=${{ env.ARTIFACTORY_RELEASE }} \
            --repo-deploy-snapshots=${{ env.ARTIFACTORY_SNAPSHOT }} \

      - name: Build and Deploy Artifact
        run: |
          jf mvn clean package deploy -DskipTests
          
      - name: Publish Build Info
        run: |
          jf rt bp oneretail-app ${{ github.run_number }}
              
      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.PACKAGES_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository }}/oneretail-app:latest .

      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{ github.repository }}/oneretail-app:latest

      # --------------------------------------------------------
      # 4) Push Docker image to JFrog Artifactory Docker registry
      # --------------------------------------------------------
      - name: Log in to the JFrog Docker registry
        uses: docker/login-action@v3
        with:
          registry: oneretailhackaton.jfrog.io
          username: ${{ secrets.ARTIFACT_USER_ID }} # or an Artifactory username if needed
          password: ${{ secrets.JF_DOCKER_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Build and push Docker image to Artifactory
        id: push
        uses: docker/build-push-action@v6
        with:
          # If your Dockerfile is in the root directory:
          #   context: .
          #   file: ./Dockerfile
          # If it's in an "app" subfolder, adjust accordingly
          context: "."
          file: "./Dockerfile"
          push: true
          tags: ${{ env.IMAGE_NAME }}
